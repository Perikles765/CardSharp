/**
 * 
 */
package cardsharp;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Random;

/**
 * @author BTrainor
 *
 */
public class DriverClass {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		List<Cards> newDeck = createDeck();
		//highestCardGame(newDeck);
		snap(newDeck);

	}
	
	
	/**
	 * Rudimentary game of snap simulated between 2 players.  Could be improved to allow each player to "Snap" at any stage
	 * rather than after they have played their card
	 * @param newDeck
	 */
	public static void snap(List<Cards> newDeck) {
		shuffleDeck(newDeck);
		Queue<Cards> dealer = new LinkedList<Cards>(newDeck);
		
		if (dealer.size() % 2 != 0) {
			System.err.println("Cards in deck: " + dealer.size());
			System.err.println("Cards in deck must be an even number to play");
			System.err.println("Discarding 1 card");
			dealer.remove();
		} else if (dealer.size() < 2) {
			System.err.println("Not enough cards to play");
			System.err.println("Cards in deck: " + dealer.size());
			System.err.println("Exiting game");
			return;
		}
		
		Queue<Cards> p1Pile = new LinkedList<Cards>();
		Queue<Cards> p2Pile = new LinkedList<Cards>();
		Queue<Cards> centrePile = new LinkedList<Cards>();
		
		while(!dealer.isEmpty()) {
			p1Pile.add(dealer.remove());
			p2Pile.add(dealer.remove());
		}
		
		Random rand = new Random();
		
		System.out.println("Lets play snap");
		System.out.println("First player to run out of cards loses");
		System.out.println("**************************************");
		
		while(p1Pile.size() > 0 && p2Pile.size() > 0) {
			Cards p1Card = p1Pile.peek();
			Cards p2Card = p2Pile.peek();
			centrePile.add(p1Pile.remove());
			centrePile.add(p2Pile.remove());
			
			System.out.println("Player 1 plays : "+ p1Card.toString());
			System.out.println("Player 2 playes : "+p2Card.toString());
			if (p1Card.getCardValue() != p2Card.getCardValue()) {
				System.out.println("no match - next round");
			} else {
				System.out.println("****SNAP****");
				int race = rand.nextInt(2)+1; // random num 1 or 2 to indicate who said snap first
				int opponent = race == 1? 2: 1;
				System.out.printf("Player %d snapped first. %n", race);
				if (race ==1) {
					p1Pile.addAll(centrePile);
					centrePile.clear();
				} else {
					p2Pile.addAll(centrePile);
					centrePile.clear();
				}
				System.out.printf("Card counts : P1-%d cards | P2-%d cards | centre -%d cards | Total(%d)%n",
				p1Pile.size(), p2Pile.size(), centrePile.size(), (p1Pile.size()+p2Pile.size()+centrePile.size())); 
			}
		}
		System.out.println("Game over");
		System.out.printf("Final Card counts:  P1-%d cards | P2-%d cards | centre -%d cards | Total(%d)%n", 
				p1Pile.size(), p2Pile.size(), centrePile.size(), (p1Pile.size()+p2Pile.size()+centrePile.size())); 
		if(p1Pile.size() == p2Pile.size()) {
			System.out.println("Draw game");
		} else if(p1Pile.size() > p2Pile.size()) {
			System.out.println("Player 1 wins");
		} else {
			System.out.println("Player 2 wins");
		}
		System.out.println();
		
	}
	
	/**
	 * Highest card game between 2 (simulated) players.  Best of 5
	 * @param newDeck
	 */
	public static void highestCardGame(List<Cards> newDeck) {
		final int GOAL = 3;

		shuffleDeck(newDeck);
		int player1score = 0, player2score = 0;
		Queue<Cards> dealer = new LinkedList<Cards>(newDeck);

		if (dealer.size() % 2 != 0) {
			System.err.println("Cards in deck: " + dealer.size());
			System.err.println("Cards in deck must be an even number to play");
			System.err.println("Discarding 1 card");
			dealer.remove();
		} else if (dealer.size() < 2) {
			System.err.println("Not enough cards to play");
			System.err.println("Cards in deck: " + dealer.size());
			System.err.println("Exiting game");
			return;
		}

		ArrayList<Cards> p1deck = new ArrayList<Cards>();
		ArrayList<Cards> p2deck = new ArrayList<Cards>();
		while (!dealer.isEmpty()) {
			p1deck.add(dealer.remove());
			p2deck.add(dealer.remove());
		}
		int round = 1;
		Random rand = new Random();

		System.out.printf("High Card, Best of %d.  First to %d wins. %n", ((GOAL * 2) - 1), GOAL);
		System.out.println("****************************************");
		while (player1score < GOAL && player2score < GOAL) {
			System.out.printf("Round %d%n", round);
			int p1index = rand.nextInt(p1deck.size());
			Cards p1choice = p1deck.get(p1index);
			int p2index = rand.nextInt(p2deck.size());
			Cards p2choice = p2deck.get(p2index);
			System.out.println("Player 1 choses : " + p1choice.toString());
			System.out.println("Player 2 choses : " + p2choice.toString());

			if (p1choice.getCardValue() > p2choice.getCardValue()) {
				System.out.println("Player 1 wins this round");
				player1score++;
				round++;
			} else if (p2choice.getCardValue() > p1choice.getCardValue()) {
				System.out.println("Player 2 wins this round");
				player2score++;
				round++;
			} else {
				System.out.println("Draw round");
			}
			System.out.printf("Current score : Player 1 (%d) || Player 2 (%d)%n", player1score, player2score);
		}
		String result = player1score > player2score ? "Player 1 wins!" : "Player 2 wins!";
		System.out.println();
		System.out.println(result);
		System.out.printf("Final Score: Player 1 (%d) || Player 2(%d)%n%n", player1score, player2score);
	}

	public static void sortDeck(List<Cards> sortDeck) {
		Collections.sort(sortDeck, new CardValueComparator());
		Collections.sort(sortDeck, new CardSuitComparator());
	}

	/**
	 * Method to shuffle playing deck
	 * 
	 * @param newDeck
	 */
	public static void shuffleDeck(List<Cards> newDeck) {
		Collections.shuffle(newDeck);
	}

	/**
	 * create a new deck by adding all possible valud cards to a list
	 * 
	 * @return
	 */
	public static List<Cards> createDeck() {
		List<Cards> deck = new ArrayList<Cards>(52);

		Suit[] suits = Suit.values(); // get an array of all possible values for this enum
		for (Suit suit : suits) {
			for (int i = 2; i <= 14; i++) {
				deck.add(new Cards(i, suit));
			}
		}
		return deck;
	}

}
